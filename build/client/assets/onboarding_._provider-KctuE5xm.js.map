{"version":3,"file":"onboarding_._provider-KctuE5xm.js","sources":["../../../app/routes/_auth+/onboarding_.$provider.tsx"],"sourcesContent":["import {\n\tgetFormProps,\n\tgetInputProps,\n\tuseForm,\n\ttype SubmissionResult,\n} from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport {\n\tredirect,\n\tjson,\n\ttype ActionFunctionArgs,\n\ttype LoaderFunctionArgs,\n\ttype MetaFunction,\n} from '@remix-run/node'\nimport {\n\ttype Params,\n\tForm,\n\tuseActionData,\n\tuseLoaderData,\n\tuseSearchParams,\n} from '@remix-run/react'\nimport { safeRedirect } from 'remix-utils/safe-redirect'\nimport { z } from 'zod'\nimport { CheckboxField, ErrorList, Field } from '#app/components/forms.tsx'\nimport { Spacer } from '#app/components/spacer.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tauthenticator,\n\tsessionKey,\n\tsignupWithConnection,\n\trequireAnonymous,\n} from '#app/utils/auth.server.ts'\nimport { ProviderNameSchema } from '#app/utils/connections.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { authSessionStorage } from '#app/utils/session.server.ts'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { NameSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { verifySessionStorage } from '#app/utils/verification.server.ts'\nimport { onboardingEmailSessionKey } from './onboarding'\n\nexport const providerIdKey = 'providerId'\nexport const prefilledProfileKey = 'prefilledProfile'\n\nconst SignupFormSchema = z.object({\n\timageUrl: z.string().optional(),\n\tusername: UsernameSchema,\n\tname: NameSchema,\n\tagreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\n\t\trequired_error: 'You must agree to the terms of service and privacy policy',\n\t}),\n\tremember: z.boolean().optional(),\n\tredirectTo: z.string().optional(),\n})\n\nasync function requireData({\n\trequest,\n\tparams,\n}: {\n\trequest: Request\n\tparams: Params\n}) {\n\tawait requireAnonymous(request)\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst email = verifySession.get(onboardingEmailSessionKey)\n\tconst providerId = verifySession.get(providerIdKey)\n\tconst result = z\n\t\t.object({\n\t\t\temail: z.string(),\n\t\t\tproviderName: ProviderNameSchema,\n\t\t\tproviderId: z.string(),\n\t\t})\n\t\t.safeParse({ email, providerName: params.provider, providerId })\n\tif (result.success) {\n\t\treturn result.data\n\t} else {\n\t\tconsole.error(result.error)\n\t\tthrow redirect('/signup')\n\t}\n}\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n\tconst { email } = await requireData({ request, params })\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst prefilledProfile = verifySession.get(prefilledProfileKey)\n\n\tconst formError = authSession.get(authenticator.sessionErrorKey)\n\n\treturn json({\n\t\temail,\n\t\tstatus: 'idle',\n\t\tsubmission: {\n\t\t\tstatus: 'error',\n\t\t\tinitialValue: prefilledProfile ?? {},\n\t\t\terror: {\n\t\t\t\t'': typeof formError === 'string' ? [formError] : [],\n\t\t\t},\n\t\t} as SubmissionResult,\n\t})\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n\tconst { email, providerId, providerName } = await requireData({\n\t\trequest,\n\t\tparams,\n\t})\n\tconst formData = await request.formData()\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: SignupFormSchema.superRefine(async (data, ctx) => {\n\t\t\tconst existingUser = await prisma.user.findUnique({\n\t\t\t\twhere: { username: data.username },\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (existingUser) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['username'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'A user already exists with this username',\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}).transform(async data => {\n\t\t\tconst session = await signupWithConnection({\n\t\t\t\t...data,\n\t\t\t\temail,\n\t\t\t\tproviderId,\n\t\t\t\tproviderName,\n\t\t\t})\n\t\t\treturn { ...data, session }\n\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { session, remember, redirectTo } = submission.value\n\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tauthSession.set(sessionKey, session.id)\n\tconst headers = new Headers()\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait authSessionStorage.commitSession(authSession, {\n\t\t\texpires: remember ? session.expirationDate : undefined,\n\t\t}),\n\t)\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait verifySessionStorage.destroySession(verifySession),\n\t)\n\n\treturn redirectWithToast(\n\t\tsafeRedirect(redirectTo),\n\t\t{ title: 'Welcome', description: 'Thanks for signing up!' },\n\t\t{ headers },\n\t)\n}\n\nexport const meta: MetaFunction = () => {\n\treturn [{ title: 'Setup Epic Notes Account' }]\n}\n\nexport default function SignupRoute() {\n\tconst data = useLoaderData<typeof loader>()\n\tconst actionData = useActionData<typeof action>()\n\tconst isPending = useIsPending()\n\tconst [searchParams] = useSearchParams()\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tconst [form, fields] = useForm({\n\t\tid: 'onboarding-provider-form',\n\t\tconstraint: getZodConstraint(SignupFormSchema),\n\t\tlastResult: actionData?.result ?? data.submission,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: SignupFormSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container flex min-h-full flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"mx-auto w-full max-w-lg\">\n\t\t\t\t<div className=\"flex flex-col gap-3 text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Welcome aboard {data.email}!</h1>\n\t\t\t\t\t<p className=\"text-body-md text-muted-foreground\">\n\t\t\t\t\t\tPlease enter your details.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<Spacer size=\"xs\" />\n\t\t\t\t<Form\n\t\t\t\t\tmethod=\"POST\"\n\t\t\t\t\tclassName=\"mx-auto min-w-full max-w-sm sm:min-w-[368px]\"\n\t\t\t\t\t{...getFormProps(form)}\n\t\t\t\t>\n\t\t\t\t\t{fields.imageUrl.initialValue ? (\n\t\t\t\t\t\t<div className=\"mb-4 flex flex-col items-center justify-center gap-4\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={fields.imageUrl.initialValue}\n\t\t\t\t\t\t\t\talt=\"Profile\"\n\t\t\t\t\t\t\t\tclassName=\"h-24 w-24 rounded-full\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p className=\"text-body-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\tYou can change your photo later\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<input {...getInputProps(fields.imageUrl, { type: 'hidden' })} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.username.id, children: 'Username' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.username, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'username',\n\t\t\t\t\t\t\tclassName: 'lowercase',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.name.id, children: 'Name' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.name, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'name',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.name.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.agreeToTermsOfServiceAndPrivacyPolicy.id,\n\t\t\t\t\t\t\tchildren:\n\t\t\t\t\t\t\t\t'Do you agree to our Terms of Service and Privacy Policy?',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(\n\t\t\t\t\t\t\tfields.agreeToTermsOfServiceAndPrivacyPolicy,\n\t\t\t\t\t\t\t{ type: 'checkbox' },\n\t\t\t\t\t\t)}\n\t\t\t\t\t\terrors={fields.agreeToTermsOfServiceAndPrivacyPolicy.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.remember.id,\n\t\t\t\t\t\t\tchildren: 'Remember me',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(fields.remember, { type: 'checkbox' })}\n\t\t\t\t\t\terrors={fields.remember.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{redirectTo ? (\n\t\t\t\t\t\t<input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<div className=\"flex items-center justify-between gap-6\">\n\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate an account\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"names":["SignupFormSchema","z","UsernameSchema","NameSchema","meta","SignupRoute","data","useLoaderData","actionData","useActionData","isPending","useIsPending","searchParams","useSearchParams","redirectTo","form","useForm","getZodConstraint","formData","parseWithZod","jsx","jsxs","Spacer","Form","getFormProps","fields","getInputProps","Field","CheckboxField","session","ErrorList","StatusButton"],"mappings":"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"}