{"version":3,"file":"profile.change-email-c7i-OlZo.js","sources":["../../../app/routes/settings+/profile.change-email.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\tredirect,\n\ttype ActionFunctionArgs,\n\ttype LoaderFunctionArgs,\n} from '@remix-run/node'\nimport { Form, useActionData, useLoaderData } from '@remix-run/react'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tprepareVerification,\n\trequireRecentVerification,\n} from '#app/routes/_auth+/verify.server.ts'\nimport { requireUserId } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { sendEmail } from '#app/utils/email.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { EmailSchema } from '#app/utils/user-validation.ts'\nimport { verifySessionStorage } from '#app/utils/verification.server.ts'\nimport { EmailChangeEmail } from './profile.change-email.server.tsx'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"envelope-closed\">Change Email</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nexport const newEmailAddressSessionKey = 'new-email-address'\n\nconst ChangeEmailSchema = z.object({\n\temail: EmailSchema,\n})\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tawait requireRecentVerification(request)\n\tconst userId = await requireUserId(request)\n\tconst user = await prisma.user.findUnique({\n\t\twhere: { id: userId },\n\t\tselect: { email: true },\n\t})\n\tif (!user) {\n\t\tconst params = new URLSearchParams({ redirectTo: request.url })\n\t\tthrow redirect(`/login?${params}`)\n\t}\n\treturn json({ user })\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: ChangeEmailSchema.superRefine(async (data, ctx) => {\n\t\t\tconst existingUser = await prisma.user.findUnique({\n\t\t\t\twhere: { email: data.email },\n\t\t\t})\n\t\t\tif (existingUser) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['email'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'This email is already in use.',\n\t\t\t\t})\n\t\t\t}\n\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\tconst { otp, redirectTo, verifyUrl } = await prepareVerification({\n\t\tperiod: 10 * 60,\n\t\trequest,\n\t\ttarget: userId,\n\t\ttype: 'change-email',\n\t})\n\n\tconst response = await sendEmail({\n\t\tto: submission.value.email,\n\t\tsubject: `Epic Notes Email Change Verification`,\n\t\treact: <EmailChangeEmail verifyUrl={verifyUrl.toString()} otp={otp} />,\n\t})\n\n\tif (response.status === 'success') {\n\t\tconst verifySession = await verifySessionStorage.getSession()\n\t\tverifySession.set(newEmailAddressSessionKey, submission.value.email)\n\t\treturn redirect(redirectTo.toString(), {\n\t\t\theaders: {\n\t\t\t\t'set-cookie': await verifySessionStorage.commitSession(verifySession),\n\t\t\t},\n\t\t})\n\t} else {\n\t\treturn json(\n\t\t\t{ result: submission.reply({ formErrors: [response.error.message] }) },\n\t\t\t{ status: 500 },\n\t\t)\n\t}\n}\n\nexport default function ChangeEmailIndex() {\n\tconst data = useLoaderData<typeof loader>()\n\tconst actionData = useActionData<typeof action>()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'change-email-form',\n\t\tconstraint: getZodConstraint(ChangeEmailSchema),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ChangeEmailSchema })\n\t\t},\n\t})\n\n\tconst isPending = useIsPending()\n\treturn (\n\t\t<div>\n\t\t\t<h1 className=\"text-h1\">Change Email</h1>\n\t\t\t<p>You will receive an email at the new email address to confirm.</p>\n\t\t\t<p>\n\t\t\t\tAn email notice will also be sent to your old address {data.user.email}.\n\t\t\t</p>\n\t\t\t<div className=\"mx-auto mt-5 max-w-sm\">\n\t\t\t\t<Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ children: 'New Email' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.email, { type: 'email' }),\n\t\t\t\t\t\t\tautoComplete: 'email',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.email.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSend Confirmation\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"names":["handle","jsx","Icon","ChangeEmailSchema","z","EmailSchema","ChangeEmailIndex","data","useLoaderData","actionData","useActionData","form","fields","useForm","getZodConstraint","formData","parseWithZod","isPending","useIsPending","jsxs","Form","getFormProps","Field","getInputProps","ErrorList","StatusButton"],"mappings":"wqBAYqB,MAAAA,EAAA,CACrB,WAA6BC,EAAA,IAAAC,EAAA,CAC7B,KAAA,kBACC,SAAA,cAAA,CACA,EACM,kBAAA,IAAA,IACP,EAEAC,EAA0BC,EAAA,OAAA,CAC1B,MAASC,CACT,CAAA,EACqC,SAAAC,GAAA,CACrC,MAAAC,EAAiCC,IAG1BC,EAA6CC,IACvC,CAAAC,EAAAC,CAAA,EAAAC,EAAA,wBAEb,WAAAC,EAAAX,CAAA,EAEO,WAAkCM,GAAA,YAAAA,EAAA,OAEnC,WAAA,CACE,SAAAM,CACR,EAAC,CAEqB,OAAAC,EAAAD,EAAS,CACxB,QACN,CAAM,CACN,CAA0C,CACzC,EACAE,EAAUC,IACX,OAACC,EAAAA,KAAA,MAAA,CACD,SAAW,CAAAlB,EAAA,IAAA,KAAA,CACV,oBACM,SAAA,cAA2B,CAClC,EAAAA,EAAA,IAAA,IAAA,CACO,SAAO,gEACf,CAAA,EAAAkB,EAAA,KAAA,IAAA,CAEsB,SAAA,CAAA,yDAAwCZ,EAAA,KAAA,MAAA,GAAA,CAC7D,CAAM,EAAeN,EAAA,IAAA,MAAA,CACf,UAAA,wBACA,SAAmBkB,EAAA,KAAAC,EAAuB,CACvC,OAAA,OACP,GAAAC,EAAqBV,CAAA,EACpB,SAAgB,CAAWV,EAAA,IAAAqB,EAAA,CAC3B,WAAA,CACiB,SAAA,WACjB,EACC,WAAc,CACd,GAAAC,EAAqBX,EAAA,MAAA,CACZ,KAAA,OAAA,CACT,EACF,aAAA,OACA,EACM,OAAAA,EAAA,MAAA,MAAA,CACP,EAAAX,EAAA,IAAAuB,EAAA,CAEG,GAAAb,UACI,OAAAA,EAAA,MAAA,CACJ,EAAmBV,EAAA,IAAA,MAAQ,CACnB,SAAsBA,EAAA,IAAAwB,GACjC,OAAAR,EAAA,UAAAN,EAAA,QAAA,OACD,SAAA,mBACA,CAAa,CAAoD,GACnD,CACb,CAAA,CACQ,CAAA,CAAA,CAAA,CACF"}