{"version":3,"file":"forgot-password-GJUss3wI.js","sources":["../../../app/routes/_auth+/forgot-password.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport * as E from '@react-email/components'\nimport {\n\tjson,\n\tredirect,\n\ttype ActionFunctionArgs,\n\ttype MetaFunction,\n} from '@remix-run/node'\nimport { Link, useFetcher } from '@remix-run/react'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { z } from 'zod'\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { sendEmail } from '#app/utils/email.server.ts'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { EmailSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { prepareVerification } from './verify.server.ts'\n\nconst ForgotPasswordSchema = z.object({\n\tusernameOrEmail: z.union([EmailSchema, UsernameSchema]),\n})\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst formData = await request.formData()\n\tcheckHoneypot(formData)\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: ForgotPasswordSchema.superRefine(async (data, ctx) => {\n\t\t\tconst user = await prisma.user.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tOR: [\n\t\t\t\t\t\t{ email: data.usernameOrEmail },\n\t\t\t\t\t\t{ username: data.usernameOrEmail },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (!user) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['usernameOrEmail'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'No user exists with this username or email',\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}),\n\t\tasync: true,\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\tconst { usernameOrEmail } = submission.value\n\n\tconst user = await prisma.user.findFirstOrThrow({\n\t\twhere: { OR: [{ email: usernameOrEmail }, { username: usernameOrEmail }] },\n\t\tselect: { email: true, username: true },\n\t})\n\n\tconst { verifyUrl, redirectTo, otp } = await prepareVerification({\n\t\tperiod: 10 * 60,\n\t\trequest,\n\t\ttype: 'reset-password',\n\t\ttarget: usernameOrEmail,\n\t})\n\n\tconst response = await sendEmail({\n\t\tto: user.email,\n\t\tsubject: `Epic Notes Password Reset`,\n\t\treact: (\n\t\t\t<ForgotPasswordEmail onboardingUrl={verifyUrl.toString()} otp={otp} />\n\t\t),\n\t})\n\n\tif (response.status === 'success') {\n\t\treturn redirect(redirectTo.toString())\n\t} else {\n\t\treturn json(\n\t\t\t{ result: submission.reply({ formErrors: [response.error.message] }) },\n\t\t\t{ status: 500 },\n\t\t)\n\t}\n}\n\nfunction ForgotPasswordEmail({\n\tonboardingUrl,\n\totp,\n}: {\n\tonboardingUrl: string\n\totp: string\n}) {\n\treturn (\n\t\t<E.Html lang=\"en\" dir=\"ltr\">\n\t\t\t<E.Container>\n\t\t\t\t<h1>\n\t\t\t\t\t<E.Text>Epic Notes Password Reset</E.Text>\n\t\t\t\t</h1>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>\n\t\t\t\t\t\tHere's your verification code: <strong>{otp}</strong>\n\t\t\t\t\t</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>Or click the link:</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<E.Link href={onboardingUrl}>{onboardingUrl}</E.Link>\n\t\t\t</E.Container>\n\t\t</E.Html>\n\t)\n}\n\nexport const meta: MetaFunction = () => {\n\treturn [{ title: 'Password Recovery for Epic Notes' }]\n}\n\nexport default function ForgotPasswordRoute() {\n\tconst forgotPassword = useFetcher<typeof action>()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'forgot-password-form',\n\t\tconstraint: getZodConstraint(ForgotPasswordSchema),\n\t\tlastResult: forgotPassword.data?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ForgotPasswordSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container pb-32 pt-20\">\n\t\t\t<div className=\"flex flex-col justify-center\">\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Forgot Password</h1>\n\t\t\t\t\t<p className=\"mt-3 text-body-md text-muted-foreground\">\n\t\t\t\t\t\tNo worries, we'll send you reset instructions.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"mx-auto mt-16 min-w-full max-w-sm sm:min-w-[368px]\">\n\t\t\t\t\t<forgotPassword.Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\t\t\thtmlFor: fields.usernameOrEmail.id,\n\t\t\t\t\t\t\t\t\tchildren: 'Username or Email',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t\t\t\t...getInputProps(fields.usernameOrEmail, { type: 'text' }),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\terrors={fields.usernameOrEmail.errors}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\tforgotPassword.state === 'submitting'\n\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t: form.status ?? 'idle'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tdisabled={forgotPassword.state !== 'idle'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tRecover password\n\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</forgotPassword.Form>\n\t\t\t\t\t<Link\n\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\tclassName=\"mt-11 text-center text-body-sm font-bold\"\n\t\t\t\t\t>\n\t\t\t\t\t\tBack to Login\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport function ErrorBoundary() {\n\treturn <GeneralErrorBoundary />\n}\n"],"names":["ForgotPasswordSchema","z","EmailSchema","UsernameSchema","meta","ForgotPasswordRoute","forgotPassword","useFetcher","useForm","getZodConstraint","_a","formData","parseWithZod","jsx","jsxs","getFormProps","form","HoneypotInputs","Field","fields","getInputProps","ErrorList","StatusButton","Link","ErrorBoundary","GeneralErrorBoundary"],"mappings":"iwBAWA,MAAAA,EAAkBC,EAAA,OAAA,CAClB,gBAAqCA,EAAA,MAAA,CAAAC,EAAAC,CAAA,CAAA,CACrC,CAAA,EAC6BC,EAAA,IACpB,CAAc,CACvB,MAA0B,kCAC1B,CAAA,EAEoC,SAAAC,GAAA,OAE9B,MAAAC,EAAAC,QACc,EAAAC,EAAO,CAC1B,GAAA,uBAEqB,WAAAC,EAAST,CAA+B,EACvD,YAAAU,EAAAJ,EAAiB,OAAjB,YAAAI,EAAkC,OACxC,WAAA,CACM,SAAAC,CAA0C,EACvC,CACP,OAAaC,EAAMD,EAAO,CACzB,OAAOX,CAAA,CAAA,CAEL,EACA,iBAAY,QAAqB,CAClC,EACD,OAAAa,EAAAA,IAAA,MAAA,CACA,UAAA,wBAAmB,SACnBC,EAAA,KAAA,MAAA,CACD,UAAW,+BACV,SAAa,CAAAA,EAAA,KAAA,MAAA,CACZ,UAAwB,cACxB,SAAQ,CAAaD,EAAA,IAAA,KAAA,CACrB,UAAS,UACT,SAAA,iBACD,CAAA,EAAAA,EAAA,IAAA,IAAA,CACD,UAAA,0CACA,SAAA,gDAAA,CACM,CAAA,CAAA,CACP,EAAAC,EAAA,KAAA,MAAA,CACG,+DACI,SAAA,CAAAA,EAAAA,KAAAR,EAAA,KAAA,CACJ,OAAmB,OACX,GAAAS,EAAAC,CAAsB,EACjC,SAAA,CAAAH,EAAAA,IAAAI,EAAA,CAAA,CAAA,EAAAJ,EAAA,IAAA,MAAA,CACD,SAAAA,EAAA,IAAAK,EAAA,CACwB,WAAA,CAEX,QAAaC,EAAA,gBAAsB,GAClC,SAAG,mBACC,EACjB,WAAA,CAEkB,UAAA,GACL,GAAAC,EAAAD,EAAA,gBAAA,CACb,KAAA,MAAA,CACM,CACE,EACR,OAAAA,EAAA,gBAAA,MAED,CAAM,CAA2B,CACvB,EAAAN,EAAA,IAAAQ,EAAA,CACA,OAAAL,EAAA,OAEP,GAAAA,EAAA,OAAmE,CAErE,EAAAH,EAAA,IAAA,MAAA,CAEG,iBACI,SAAoBA,EAAS,IAACS,EAAA,CAC/B,UAAA,SACC,OAAAhB,EAAA,QAAA,aAAA,UAAAU,EAAA,QAAA,OACJ,KAAmB,kBACPV,EAAA,QAAA,OACf,SAAA,kBAAA,CACD,CACD,CAAA,CAAA,CAEA,CAAS,EAAoBO,EAAA,IAAAU,EAAA,CAC5B,GAAA,SACA,UAAA,2CAIE,SAAA,eACF,CACC,CAAA,CAEE,CAAA,CAAA,CAEA,CACC,CACQ,CAAA,CAAA,CAER,SACDC,GAAA,CAAA,OACCX,EACA,IAAAY,EAAA,CAAA,CAAA,CACD"}