{"version":3,"file":"profile.index-mH3WEw1Y.js","sources":["../../../app/routes/settings+/profile.index.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { invariantResponse } from '@epic-web/invariant'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n} from '@remix-run/node'\nimport { Link, useFetcher, useLoaderData } from '@remix-run/react'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { requireUserId, sessionKey } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { getUserImgSrc, useDoubleCheck } from '#app/utils/misc.tsx'\nimport { authSessionStorage } from '#app/utils/session.server.ts'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { NameSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { twoFAVerificationType } from './profile.two-factor.tsx'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n\nconst ProfileFormSchema = z.object({\n\tname: NameSchema.optional(),\n\tusername: UsernameSchema,\n})\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst user = await prisma.user.findUniqueOrThrow({\n\t\twhere: { id: userId },\n\t\tselect: {\n\t\t\tid: true,\n\t\t\tname: true,\n\t\t\tusername: true,\n\t\t\temail: true,\n\t\t\timage: {\n\t\t\t\tselect: { id: true },\n\t\t\t},\n\t\t\t_count: {\n\t\t\t\tselect: {\n\t\t\t\t\tsessions: {\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\texpirationDate: { gt: new Date() },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tconst twoFactorVerification = await prisma.verification.findUnique({\n\t\tselect: { id: true },\n\t\twhere: { target_type: { type: twoFAVerificationType, target: userId } },\n\t})\n\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\n\treturn json({\n\t\tuser,\n\t\thasPassword: Boolean(password),\n\t\tisTwoFactorEnabled: Boolean(twoFactorVerification),\n\t})\n}\n\ntype ProfileActionArgs = {\n\trequest: Request\n\tuserId: string\n\tformData: FormData\n}\nconst profileUpdateActionIntent = 'update-profile'\nconst signOutOfSessionsActionIntent = 'sign-out-of-sessions'\nconst deleteDataActionIntent = 'delete-data'\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\tconst intent = formData.get('intent')\n\tswitch (intent) {\n\t\tcase profileUpdateActionIntent: {\n\t\t\treturn profileUpdateAction({ request, userId, formData })\n\t\t}\n\t\tcase signOutOfSessionsActionIntent: {\n\t\t\treturn signOutOfSessionsAction({ request, userId, formData })\n\t\t}\n\t\tcase deleteDataActionIntent: {\n\t\t\treturn deleteDataAction({ request, userId, formData })\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Response(`Invalid intent \"${intent}\"`, { status: 400 })\n\t\t}\n\t}\n}\n\nexport default function EditUserProfile() {\n\tconst data = useLoaderData<typeof loader>()\n\n\treturn (\n\t\t<div className=\"flex flex-col gap-12\">\n\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t<div className=\"relative h-52 w-52\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={getUserImgSrc(data.user.image?.id)}\n\t\t\t\t\t\talt={data.user.username}\n\t\t\t\t\t\tclassName=\"h-full w-full rounded-full object-cover\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tasChild\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\tclassName=\"absolute -right-3 top-3 flex h-10 w-10 items-center justify-center rounded-full p-0\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tpreventScrollReset\n\t\t\t\t\t\t\tto=\"photo\"\n\t\t\t\t\t\t\ttitle=\"Change profile photo\"\n\t\t\t\t\t\t\taria-label=\"Change profile photo\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon name=\"camera\" className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<UpdateProfile />\n\n\t\t\t<div className=\"col-span-6 my-6 h-1 border-b-[1.5px] border-foreground\" />\n\t\t\t<div className=\"col-span-full flex flex-col gap-6\">\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"change-email\">\n\t\t\t\t\t\t<Icon name=\"envelope-closed\">\n\t\t\t\t\t\t\tChange email from {data.user.email}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"two-factor\">\n\t\t\t\t\t\t{data.isTwoFactorEnabled ? (\n\t\t\t\t\t\t\t<Icon name=\"lock-closed\">2FA is enabled</Icon>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Icon name=\"lock-open-1\">Enable 2FA</Icon>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to={data.hasPassword ? 'password' : 'password/create'}>\n\t\t\t\t\t\t<Icon name=\"dots-horizontal\">\n\t\t\t\t\t\t\t{data.hasPassword ? 'Change Password' : 'Create a Password'}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"connections\">\n\t\t\t\t\t\t<Icon name=\"link-2\">Manage connections</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link\n\t\t\t\t\t\treloadDocument\n\t\t\t\t\t\tdownload=\"my-epic-notes-data.json\"\n\t\t\t\t\t\tto=\"/resources/download-user-data\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Icon name=\"download\">Download your data</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<SignOutOfSessions />\n\t\t\t\t<DeleteData />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nasync function profileUpdateAction({ userId, formData }: ProfileActionArgs) {\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: ProfileFormSchema.superRefine(async ({ username }, ctx) => {\n\t\t\tconst existingUsername = await prisma.user.findUnique({\n\t\t\t\twhere: { username },\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (existingUsername && existingUsername.id !== userId) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['username'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'A user already exists with this username',\n\t\t\t\t})\n\t\t\t}\n\t\t}),\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst data = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tname: data.name,\n\t\t\tusername: data.username,\n\t\t},\n\t})\n\n\treturn json({\n\t\tresult: submission.reply(),\n\t})\n}\n\nfunction UpdateProfile() {\n\tconst data = useLoaderData<typeof loader>()\n\n\tconst fetcher = useFetcher<typeof profileUpdateAction>()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'edit-profile',\n\t\tconstraint: getZodConstraint(ProfileFormSchema),\n\t\tlastResult: fetcher.data?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ProfileFormSchema })\n\t\t},\n\t\tdefaultValue: {\n\t\t\tusername: data.user.username,\n\t\t\tname: data.user.name,\n\t\t},\n\t})\n\n\treturn (\n\t\t<fetcher.Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t<div className=\"grid grid-cols-6 gap-x-10\">\n\t\t\t\t<Field\n\t\t\t\t\tclassName=\"col-span-3\"\n\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\thtmlFor: fields.username.id,\n\t\t\t\t\t\tchildren: 'Username',\n\t\t\t\t\t}}\n\t\t\t\t\tinputProps={getInputProps(fields.username, { type: 'text' })}\n\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tclassName=\"col-span-3\"\n\t\t\t\t\tlabelProps={{ htmlFor: fields.name.id, children: 'Name' }}\n\t\t\t\t\tinputProps={getInputProps(fields.name, { type: 'text' })}\n\t\t\t\t\terrors={fields.name.errors}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tsize=\"wide\"\n\t\t\t\t\tname=\"intent\"\n\t\t\t\t\tvalue={profileUpdateActionIntent}\n\t\t\t\t\tstatus={fetcher.state !== 'idle' ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t>\n\t\t\t\t\tSave changes\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</fetcher.Form>\n\t)\n}\n\nasync function signOutOfSessionsAction({ request, userId }: ProfileActionArgs) {\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst sessionId = authSession.get(sessionKey)\n\tinvariantResponse(\n\t\tsessionId,\n\t\t'You must be authenticated to sign out of other sessions',\n\t)\n\tawait prisma.session.deleteMany({\n\t\twhere: {\n\t\t\tuserId,\n\t\t\tid: { not: sessionId },\n\t\t},\n\t})\n\treturn json({ status: 'success' } as const)\n}\n\nfunction SignOutOfSessions() {\n\tconst data = useLoaderData<typeof loader>()\n\tconst dc = useDoubleCheck()\n\n\tconst fetcher = useFetcher<typeof signOutOfSessionsAction>()\n\tconst otherSessionsCount = data.user._count.sessions - 1\n\treturn (\n\t\t<div>\n\t\t\t{otherSessionsCount ? (\n\t\t\t\t<fetcher.Form method=\"POST\">\n\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t{...dc.getButtonProps({\n\t\t\t\t\t\t\ttype: 'submit',\n\t\t\t\t\t\t\tname: 'intent',\n\t\t\t\t\t\t\tvalue: signOutOfSessionsActionIntent,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tvariant={dc.doubleCheck ? 'destructive' : 'default'}\n\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\tfetcher.state !== 'idle'\n\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t: fetcher.data?.status ?? 'idle'\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Icon name=\"avatar\">\n\t\t\t\t\t\t\t{dc.doubleCheck\n\t\t\t\t\t\t\t\t? `Are you sure?`\n\t\t\t\t\t\t\t\t: `Sign out of ${otherSessionsCount} other sessions`}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</fetcher.Form>\n\t\t\t) : (\n\t\t\t\t<Icon name=\"avatar\">This is your only session</Icon>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nasync function deleteDataAction({ userId }: ProfileActionArgs) {\n\tawait prisma.user.delete({ where: { id: userId } })\n\treturn redirectWithToast('/', {\n\t\ttype: 'success',\n\t\ttitle: 'Data Deleted',\n\t\tdescription: 'All of your data has been deleted',\n\t})\n}\n\nfunction DeleteData() {\n\tconst dc = useDoubleCheck()\n\n\tconst fetcher = useFetcher<typeof deleteDataAction>()\n\treturn (\n\t\t<div>\n\t\t\t<fetcher.Form method=\"POST\">\n\t\t\t\t<StatusButton\n\t\t\t\t\t{...dc.getButtonProps({\n\t\t\t\t\t\ttype: 'submit',\n\t\t\t\t\t\tname: 'intent',\n\t\t\t\t\t\tvalue: deleteDataActionIntent,\n\t\t\t\t\t})}\n\t\t\t\t\tvariant={dc.doubleCheck ? 'destructive' : 'default'}\n\t\t\t\t\tstatus={fetcher.state !== 'idle' ? 'pending' : 'idle'}\n\t\t\t\t>\n\t\t\t\t\t<Icon name=\"trash\">\n\t\t\t\t\t\t{dc.doubleCheck ? `Are you sure?` : `Delete all your data`}\n\t\t\t\t\t</Icon>\n\t\t\t\t</StatusButton>\n\t\t\t</fetcher.Form>\n\t\t</div>\n\t)\n}\n"],"names":["handle","ProfileFormSchema","z","NameSchema","UsernameSchema","profileUpdateActionIntent","signOutOfSessionsActionIntent","deleteDataActionIntent","EditUserProfile","data","useLoaderData","jsxs","jsx","getUserImgSrc","_a","Button","Link","Icon","UpdateProfile","SignOutOfSessions","DeleteData","fetcher","useFetcher","form","fields","useForm","getZodConstraint","formData","parseWithZod","getFormProps","Field","getInputProps","ErrorList","StatusButton","dc","useDoubleCheck","otherSessionsCount"],"mappings":"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"}