{"version":3,"file":"signup-HN6jnK5W.js","sources":["../../../app/routes/_auth+/signup.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport * as E from '@react-email/components'\nimport {\n\tjson,\n\tredirect,\n\ttype ActionFunctionArgs,\n\ttype MetaFunction,\n} from '@remix-run/node'\nimport { Form, useActionData, useSearchParams } from '@remix-run/react'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { z } from 'zod'\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tProviderConnectionForm,\n\tproviderNames,\n} from '#app/utils/connections.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { sendEmail } from '#app/utils/email.server.ts'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { EmailSchema } from '#app/utils/user-validation.ts'\nimport { prepareVerification } from './verify.server.ts'\n\nconst SignupSchema = z.object({\n\temail: EmailSchema,\n})\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst formData = await request.formData()\n\n\tcheckHoneypot(formData)\n\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: SignupSchema.superRefine(async (data, ctx) => {\n\t\t\tconst existingUser = await prisma.user.findUnique({\n\t\t\t\twhere: { email: data.email },\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (existingUser) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['email'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'A user already exists with this email',\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}),\n\t\tasync: true,\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\tconst { email } = submission.value\n\tconst { verifyUrl, redirectTo, otp } = await prepareVerification({\n\t\tperiod: 10 * 60,\n\t\trequest,\n\t\ttype: 'onboarding',\n\t\ttarget: email,\n\t})\n\n\tconst response = await sendEmail({\n\t\tto: email,\n\t\tsubject: `Welcome to Epic Notes!`,\n\t\treact: <SignupEmail onboardingUrl={verifyUrl.toString()} otp={otp} />,\n\t})\n\n\tif (response.status === 'success') {\n\t\treturn redirect(redirectTo.toString())\n\t} else {\n\t\treturn json(\n\t\t\t{\n\t\t\t\tresult: submission.reply({ formErrors: [response.error.message] }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tstatus: 500,\n\t\t\t},\n\t\t)\n\t}\n}\n\nexport function SignupEmail({\n\tonboardingUrl,\n\totp,\n}: {\n\tonboardingUrl: string\n\totp: string\n}) {\n\treturn (\n\t\t<E.Html lang=\"en\" dir=\"ltr\">\n\t\t\t<E.Container>\n\t\t\t\t<h1>\n\t\t\t\t\t<E.Text>Welcome to Epic Notes!</E.Text>\n\t\t\t\t</h1>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>\n\t\t\t\t\t\tHere's your verification code: <strong>{otp}</strong>\n\t\t\t\t\t</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>Or click the link to get started:</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<E.Link href={onboardingUrl}>{onboardingUrl}</E.Link>\n\t\t\t</E.Container>\n\t\t</E.Html>\n\t)\n}\n\nexport const meta: MetaFunction = () => {\n\treturn [{ title: 'Sign Up | Epic Notes' }]\n}\n\nexport default function SignupRoute() {\n\tconst actionData = useActionData<typeof action>()\n\tconst isPending = useIsPending()\n\tconst [searchParams] = useSearchParams()\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tconst [form, fields] = useForm({\n\t\tid: 'signup-form',\n\t\tconstraint: getZodConstraint(SignupSchema),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\tconst result = parseWithZod(formData, { schema: SignupSchema })\n\t\t\treturn result\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container flex flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"text-center\">\n\t\t\t\t<h1 className=\"text-h1\">Let's start your journey!</h1>\n\t\t\t\t<p className=\"mt-3 text-body-md text-muted-foreground\">\n\t\t\t\t\tPlease enter your email.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"mx-auto mt-16 min-w-full max-w-sm sm:min-w-[368px]\">\n\t\t\t\t<Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.email.id,\n\t\t\t\t\t\t\tchildren: 'Email',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.email, { type: 'email' }),\n\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t\tautoComplete: 'email',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.email.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\t\t\t\t\t<StatusButton\n\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</Form>\n\t\t\t\t<ul className=\"mt-5 flex flex-col gap-5 border-b-2 border-t-2 border-border py-3\">\n\t\t\t\t\t{providerNames.map(providerName => (\n\t\t\t\t\t\t<li key={providerName}>\n\t\t\t\t\t\t\t<ProviderConnectionForm\n\t\t\t\t\t\t\t\ttype=\"Signup\"\n\t\t\t\t\t\t\t\tproviderName={providerName}\n\t\t\t\t\t\t\t\tredirectTo={redirectTo}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport function ErrorBoundary() {\n\treturn <GeneralErrorBoundary />\n}\n"],"names":["SignupSchema","z","EmailSchema","meta","SignupRoute","actionData","useActionData","isPending","useIsPending","searchParams","useSearchParams","redirectTo","fields","useForm","getZodConstraint","formData","parseWithZod","jsxs","jsx","Form","getFormProps","form","HoneypotInputs","Field","getInputProps","ErrorList","StatusButton","providerNames","providerName","ErrorBoundary"],"mappings":"40BAcA,MAAAA,EAA6BC,EAAA,OAAA,CAC7B,MAAAC,CAAA,CACC,EAkCQC,EAAA,IACP,CAAA,CACG,MAAA,sBACH,CAAO,EAEI,SAAAC,GAAsB,CACjC,MAAAC,EAAAC,IACDC,EAAAC,IACM,CAAAC,CAAuB,EAAAC,IACvBC,EAAaF,EAAgB,IAAA,YAA8B,KACnDG,CAAA,EAAAC,EAAA,CACb,GAAA,cACA,WAAMC,EAAAd,CAAA,EACN,WAAQK,GAAA,YAAAA,EAAA,OACR,WAAA,CAEK,SAAAU,CAA2B,EAC5B,CAKD,OAJMC,EAAAD,EAAA,QACDf,CAA2D,CACnE,CAGO,EACD,iBAAA,QACN,CAAO,EACN,OAAAiB,EAAAA,KAAA,MAAA,CACC,UAAA,qDACD,SAAA,CAAAA,EAAA,KAAA,MAAA,CACA,UAAA,cAAA,SACS,CAAAC,EAAA,IAAA,KAAA,CACT,UAAA,UACD,SAAA,2BAAA,CACD,EAAAA,EAAA,IAAA,IAAA,CACD,UAAA,0CAEO,SAAqB,0BAAA,CAC3B,CAAA,CAAA,CACA,EAAAD,EAAA,KAAA,MAAA,CAIE,UAAA,qDAED,SAAA,CAAGA,EAAA,KAAFE,EAAO,CAEN,OAAA,OAGC,GAAAC,EAAAC,CAAA,EACQ,SAAA,CAAAH,EAAAA,IAAAI,EAAA,CAAA,CAAA,EAAAJ,EAAA,IAAAK,EAAA,CACwB,WAAA,CAEjC,QAAAX,EAAA,MAAA,qBAMF,WAAA,CAEF,GAAAY,EAAAZ,EAAA,MAAA,MAEkC,OACjC,CAAiB,EAClB,UAAA,GAEA,aAAsC,kBAEN,MAAA,MAC/B,CAAO,EAAgCM,EAAA,IAAAO,EAAA,CACjC,OAAAJ,EAA0B,OAEzB,GAAAA,EAAY,OAAY,CAC1B,EAAAH,EAAA,IAAAQ,EAAA,CACJ,0BACwBnB,EAAA,UAAAc,EAAA,QAAA,OACxB,KAAa,SACZ,WACO,SAAA,QAAA,CACR,CAAA,CAAA,CACkB,EAAAH,EAAA,IAAA,KAAA,CAClB,UAAA,oEAGA,SAAAS,EAAK,IAAAC,GACJV,EAAAA,IAAA,KAAA,CAAC,iBACA,CAAC,KAAA,SACA,aAAAU,EAGF,WAAAjB,CAAA,CACA,CACC,EAAAiB,CAAA,CAAA,CACC,CAAA,CAAA,CAAgB,CAChB,CAAA,CAAA,CAAC,CAAA,CAAA,SACYC,GAAA,CACX,eAAsB,CAAA,CAAA,CAAA"}