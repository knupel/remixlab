{"version":3,"file":"profile.connections-vOgcPiDw.js","sources":["../../../app/routes/settings+/profile.connections.tsx"],"sourcesContent":["import { invariantResponse } from '@epic-web/invariant'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n\ttype SerializeFrom,\n\ttype HeadersFunction,\n} from '@remix-run/node'\nimport { useFetcher, useLoaderData } from '@remix-run/react'\nimport { useState } from 'react'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipProvider,\n\tTooltipTrigger,\n} from '#app/components/ui/tooltip.tsx'\nimport { requireUserId } from '#app/utils/auth.server.ts'\nimport { resolveConnectionData } from '#app/utils/connections.server.ts'\nimport {\n\tProviderConnectionForm,\n\ttype ProviderName,\n\tProviderNameSchema,\n\tproviderIcons,\n\tproviderNames,\n} from '#app/utils/connections.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { makeTimings } from '#app/utils/timing.server.ts'\nimport { createToastHeaders } from '#app/utils/toast.server.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"link-2\">Connections</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nasync function userCanDeleteConnections(userId: string) {\n\tconst user = await prisma.user.findUnique({\n\t\tselect: {\n\t\t\tpassword: { select: { userId: true } },\n\t\t\t_count: { select: { connections: true } },\n\t\t},\n\t\twhere: { id: userId },\n\t})\n\t// user can delete their connections if they have a password\n\tif (user?.password) return true\n\t// users have to have more than one remaining connection to delete one\n\treturn Boolean(user?._count.connections && user?._count.connections > 1)\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst timings = makeTimings('profile connections loader')\n\tconst rawConnections = await prisma.connection.findMany({\n\t\tselect: { id: true, providerName: true, providerId: true, createdAt: true },\n\t\twhere: { userId },\n\t})\n\tconst connections: Array<{\n\t\tproviderName: ProviderName\n\t\tid: string\n\t\tdisplayName: string\n\t\tlink?: string | null\n\t\tcreatedAtFormatted: string\n\t}> = []\n\tfor (const connection of rawConnections) {\n\t\tconst r = ProviderNameSchema.safeParse(connection.providerName)\n\t\tif (!r.success) continue\n\t\tconst providerName = r.data\n\t\tconst connectionData = await resolveConnectionData(\n\t\t\tproviderName,\n\t\t\tconnection.providerId,\n\t\t\t{ timings },\n\t\t)\n\t\tconnections.push({\n\t\t\t...connectionData,\n\t\t\tproviderName,\n\t\t\tid: connection.id,\n\t\t\tcreatedAtFormatted: connection.createdAt.toLocaleString(),\n\t\t})\n\t}\n\n\treturn json(\n\t\t{\n\t\t\tconnections,\n\t\t\tcanDeleteConnections: await userCanDeleteConnections(userId),\n\t\t},\n\t\t{ headers: { 'Server-Timing': timings.toString() } },\n\t)\n}\n\nexport const headers: HeadersFunction = ({ loaderHeaders }) => {\n\tconst headers = {\n\t\t'Server-Timing': loaderHeaders.get('Server-Timing') ?? '',\n\t}\n\treturn headers\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\tinvariantResponse(\n\t\tformData.get('intent') === 'delete-connection',\n\t\t'Invalid intent',\n\t)\n\tinvariantResponse(\n\t\tawait userCanDeleteConnections(userId),\n\t\t'You cannot delete your last connection unless you have a password.',\n\t)\n\tconst connectionId = formData.get('connectionId')\n\tinvariantResponse(typeof connectionId === 'string', 'Invalid connectionId')\n\tawait prisma.connection.delete({\n\t\twhere: {\n\t\t\tid: connectionId,\n\t\t\tuserId: userId,\n\t\t},\n\t})\n\tconst toastHeaders = await createToastHeaders({\n\t\ttitle: 'Deleted',\n\t\tdescription: 'Your connection has been deleted.',\n\t})\n\treturn json({ status: 'success' } as const, { headers: toastHeaders })\n}\n\nexport default function Connections() {\n\tconst data = useLoaderData<typeof loader>()\n\n\treturn (\n\t\t<div className=\"mx-auto max-w-md\">\n\t\t\t{data.connections.length ? (\n\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t<p>Here are your current connections:</p>\n\t\t\t\t\t<ul className=\"flex flex-col gap-4\">\n\t\t\t\t\t\t{data.connections.map(c => (\n\t\t\t\t\t\t\t<li key={c.id}>\n\t\t\t\t\t\t\t\t<Connection\n\t\t\t\t\t\t\t\t\tconnection={c}\n\t\t\t\t\t\t\t\t\tcanDelete={data.canDeleteConnections}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<p>You don't have any connections yet.</p>\n\t\t\t)}\n\t\t\t<div className=\"mt-5 flex flex-col gap-5 border-b-2 border-t-2 border-border py-3\">\n\t\t\t\t{providerNames.map(providerName => (\n\t\t\t\t\t<ProviderConnectionForm\n\t\t\t\t\t\tkey={providerName}\n\t\t\t\t\t\ttype=\"Connect\"\n\t\t\t\t\t\tproviderName={providerName}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nfunction Connection({\n\tconnection,\n\tcanDelete,\n}: {\n\tconnection: SerializeFrom<typeof loader>['connections'][number]\n\tcanDelete: boolean\n}) {\n\tconst deleteFetcher = useFetcher<typeof action>()\n\tconst [infoOpen, setInfoOpen] = useState(false)\n\tconst icon = providerIcons[connection.providerName]\n\treturn (\n\t\t<div className=\"flex justify-between gap-2\">\n\t\t\t<span className={`inline-flex items-center gap-1.5`}>\n\t\t\t\t{icon}\n\t\t\t\t<span>\n\t\t\t\t\t{connection.link ? (\n\t\t\t\t\t\t<a href={connection.link} className=\"underline\">\n\t\t\t\t\t\t\t{connection.displayName}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tconnection.displayName\n\t\t\t\t\t)}{' '}\n\t\t\t\t\t({connection.createdAtFormatted})\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t\t{canDelete ? (\n\t\t\t\t<deleteFetcher.Form method=\"POST\">\n\t\t\t\t\t<input name=\"connectionId\" value={connection.id} type=\"hidden\" />\n\t\t\t\t\t<TooltipProvider>\n\t\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\t\tname=\"intent\"\n\t\t\t\t\t\t\t\t\tvalue=\"delete-connection\"\n\t\t\t\t\t\t\t\t\tvariant=\"destructive\"\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\t\tdeleteFetcher.state !== 'idle'\n\t\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t\t: deleteFetcher.data?.status ?? 'idle'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Icon name=\"cross-1\" />\n\t\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t<TooltipContent>Disconnect this account</TooltipContent>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t</TooltipProvider>\n\t\t\t\t</deleteFetcher.Form>\n\t\t\t) : (\n\t\t\t\t<TooltipProvider>\n\t\t\t\t\t<Tooltip open={infoOpen} onOpenChange={setInfoOpen}>\n\t\t\t\t\t\t<TooltipTrigger onClick={() => setInfoOpen(true)}>\n\t\t\t\t\t\t\t<Icon name=\"question-mark-circled\"></Icon>\n\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t<TooltipContent>\n\t\t\t\t\t\t\tYou cannot delete your last connection unless you have a password.\n\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t</TooltipProvider>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n"],"names":["handle","jsx","Icon","Connections","data","useLoaderData","jsxs","c","Connection","providerNames","providerName","ProviderConnectionForm","connection","canDelete","deleteFetcher","useFetcher","infoOpen","setInfoOpen","useState","icon","providerIcons","TooltipProvider","Tooltip","TooltipTrigger","StatusButton","_a","headers","TooltipContent"],"mappings":"meAWqB,MAAAA,EAAA,CACrB,WAA6BC,EAAA,IAAAC,EAAA,CAC7B,KAAA,SACC,SAAA,aAAA,CACA,EACA,kBAAA,IAAA,IAAA,EAEM,SAAAC,GAAA,CACP,MAAAC,EAA8BC,IAC9B,OAAsCC,EAAAA,KAAA,MAAA,CACtC,UAAA,mBACC,SAAA,CAAAF,EAAA,YAAA,OAAAE,EAAAA,KAAA,MAAA,CAEA,UAAA,sBACA,SAAA,CAAAL,EAAA,IAAA,IAAA,CACA,SAAA,oCAAA,CACM,EAAAA,EAAA,IAAA,KAAA,CACP,UAAuB,sBACvB,SAA4BG,EAAA,YAAA,IAAAG,GAAAN,EAAA,IAAA,KAAA,CACO,SAAAA,EAAA,IAAAO,EAAA,CAG5B,WAA6CD,EACvC,UAAAH,EAAA,oBAA+B,EAE5C,EAAAG,EAAA,EAAA,CAAA,CAEA,CAAA,CAAA,CACC,CAAA,EAA0BN,EAAA,IAAA,IAAK,CACtB,SAAA,qCAAA,CAAA,EACKA,EAAQ,IAAE,MAAA,CACtB,UAAU,oEACX,SAAAQ,EAAA,IAAAC,GAAAT,EAAAA,IAAAU,EAAA,CACA,KAAS,UACT,aAAAD,CAES,EAAAA,CAAA,CAAA,CAAU,CAAO,CAAA,CAE3B,CAAA,CACD,CAEA,SAAsBF,EAAA,CACf,WAAAI,EACA,UAAAC,CACN,EAAA,OACC,MAAAC,EAAoBC,IACpB,CAAAC,EAAgBC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAChBC,EAAAC,EAAAR,EAAA,YAAA,EACD,OAMMN,EAAAA,KAAA,MAAA,CACN,uCACC,SAAU,CAAAA,EAA6B,KAAA,OAAA,CACvC,UAAO,mCAAS,SAAA,CAAAa,EAAAb,EAAA,KAAA,OAAA,CAChB,YAAuB,KAAAL,EAAAA,IAAA,IAAA,CACjB,OAAiB,KACtB,UAAA,YACW,SAAAW,EAAA,WAAA,CACD,EAAAA,EAAA,YAAA,IAAA,IAAAA,EAAA,mBAAA,GAAA,CAAA,CACX,CAAA,CACA,CAAA,EAAAC,EAAiBP,OAAAQ,EAAA,KAAA,CAChB,OAAG,OACH,SAAA,CAAAb,EAAA,IAAA,QAAA,MACe,eACf,MAAAW,EAAoB,GACpB,KAAA,QAAA,CACF,EAAAX,EAAA,IAAAoB,EAAA,CAEO,SAAAf,EAAA,KAAAgB,EAAA,CACN,SAAA,CAAArB,EAAA,IAAAsB,EAAA,CACC,QAAA,GACA,SAA4BtB,EAAA,IAAAuB,EAAA,CAC7B,KAAA,SACW,0BACZ,QAAA,cACD,KAAA,KAEwC,OAAAV,EAAG,QAAoB,OAAA,YAAAW,EAAAX,EAAA,OAAA,YAAAW,EAAA,SAAA,OAC9C,SAAAxB,EAAA,IAAAC,EAAA,CACE,KAAA,SAAsC,CACxD,CACA,CAAOwB,CACR,CAAA,EAAAzB,EAAA,IAAA0B,EAAA,CAEsB,SAAA,yBACrB,CAAM,CAAA,CACN,CAAM,CACN,CAAA,CAAA,CAAA,CACC,EAAa1B,EAAc,IAAAoB,EAAA,CAC3B,SAAAf,EAAA,KAAAgB,EAAA,CACD,KAAAN,EACA,aAAAC,EACC,YAAqC,IAAAM,EAAA,CACrC,QAAA,IAAAN,EAAA,EAAA,EACD,SAAAhB,EAAA,IAAAC,EAAA,CACM,KAAA,uBACN,CAAkB,CAClB,CAAM,EAAyBD,EAAA,IAAA0B,EAAA,CACvB,SAAA,oEAAA,CACF,CAAA,CAAA,CACJ,CAAA,CACD,CAAA,CAAA,CACA,CACD"}