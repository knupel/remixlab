{"version":3,"file":"onboarding-gVVJNSlx.js","sources":["../../../app/routes/_auth+/onboarding.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport {\n\tjson,\n\tredirect,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n\ttype MetaFunction,\n} from '@remix-run/node'\nimport {\n\tForm,\n\tuseActionData,\n\tuseLoaderData,\n\tuseSearchParams,\n} from '@remix-run/react'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { safeRedirect } from 'remix-utils/safe-redirect'\nimport { z } from 'zod'\nimport { CheckboxField, ErrorList, Field } from '#app/components/forms.tsx'\nimport { Spacer } from '#app/components/spacer.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { requireAnonymous, sessionKey, signup } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { authSessionStorage } from '#app/utils/session.server.ts'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport {\n\tNameSchema,\n\tPasswordAndConfirmPasswordSchema,\n\tUsernameSchema,\n} from '#app/utils/user-validation.ts'\nimport { verifySessionStorage } from '#app/utils/verification.server.ts'\n\nexport const onboardingEmailSessionKey = 'onboardingEmail'\n\nconst SignupFormSchema = z\n\t.object({\n\t\tusername: UsernameSchema,\n\t\tname: NameSchema,\n\t\tagreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\n\t\t\trequired_error:\n\t\t\t\t'You must agree to the terms of service and privacy policy',\n\t\t}),\n\t\tremember: z.boolean().optional(),\n\t\tredirectTo: z.string().optional(),\n\t})\n\t.and(PasswordAndConfirmPasswordSchema)\n\nasync function requireOnboardingEmail(request: Request) {\n\tawait requireAnonymous(request)\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst email = verifySession.get(onboardingEmailSessionKey)\n\tif (typeof email !== 'string' || !email) {\n\t\tthrow redirect('/signup')\n\t}\n\treturn email\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst email = await requireOnboardingEmail(request)\n\treturn json({ email })\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst email = await requireOnboardingEmail(request)\n\tconst formData = await request.formData()\n\tcheckHoneypot(formData)\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: intent =>\n\t\t\tSignupFormSchema.superRefine(async (data, ctx) => {\n\t\t\t\tconst existingUser = await prisma.user.findUnique({\n\t\t\t\t\twhere: { username: data.username },\n\t\t\t\t\tselect: { id: true },\n\t\t\t\t})\n\t\t\t\tif (existingUser) {\n\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\tpath: ['username'],\n\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\tmessage: 'A user already exists with this username',\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}).transform(async data => {\n\t\t\t\tif (intent !== null) return { ...data, session: null }\n\n\t\t\t\tconst session = await signup({ ...data, email })\n\t\t\t\treturn { ...data, session }\n\t\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success' || !submission.value.session) {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { session, remember, redirectTo } = submission.value\n\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tauthSession.set(sessionKey, session.id)\n\tconst verifySession = await verifySessionStorage.getSession()\n\tconst headers = new Headers()\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait authSessionStorage.commitSession(authSession, {\n\t\t\texpires: remember ? session.expirationDate : undefined,\n\t\t}),\n\t)\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait verifySessionStorage.destroySession(verifySession),\n\t)\n\n\treturn redirectWithToast(\n\t\tsafeRedirect(redirectTo),\n\t\t{ title: 'Welcome', description: 'Thanks for signing up!' },\n\t\t{ headers },\n\t)\n}\n\nexport const meta: MetaFunction = () => {\n\treturn [{ title: 'Setup Epic Notes Account' }]\n}\n\nexport default function SignupRoute() {\n\tconst data = useLoaderData<typeof loader>()\n\tconst actionData = useActionData<typeof action>()\n\tconst isPending = useIsPending()\n\tconst [searchParams] = useSearchParams()\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tconst [form, fields] = useForm({\n\t\tid: 'onboarding-form',\n\t\tconstraint: getZodConstraint(SignupFormSchema),\n\t\tdefaultValue: { redirectTo },\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: SignupFormSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container flex min-h-full flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"mx-auto w-full max-w-lg\">\n\t\t\t\t<div className=\"flex flex-col gap-3 text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Welcome aboard {data.email}!</h1>\n\t\t\t\t\t<p className=\"text-body-md text-muted-foreground\">\n\t\t\t\t\t\tPlease enter your details.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<Spacer size=\"xs\" />\n\t\t\t\t<Form\n\t\t\t\t\tmethod=\"POST\"\n\t\t\t\t\tclassName=\"mx-auto min-w-full max-w-sm sm:min-w-[368px]\"\n\t\t\t\t\t{...getFormProps(form)}\n\t\t\t\t>\n\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.username.id, children: 'Username' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.username, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'username',\n\t\t\t\t\t\t\tclassName: 'lowercase',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.name.id, children: 'Name' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.name, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'name',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.name.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.password.id, children: 'Password' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.password, { type: 'password' }),\n\t\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.password.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.confirmPassword.id,\n\t\t\t\t\t\t\tchildren: 'Confirm Password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.confirmPassword, { type: 'password' }),\n\t\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.confirmPassword.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.agreeToTermsOfServiceAndPrivacyPolicy.id,\n\t\t\t\t\t\t\tchildren:\n\t\t\t\t\t\t\t\t'Do you agree to our Terms of Service and Privacy Policy?',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(\n\t\t\t\t\t\t\tfields.agreeToTermsOfServiceAndPrivacyPolicy,\n\t\t\t\t\t\t\t{ type: 'checkbox' },\n\t\t\t\t\t\t)}\n\t\t\t\t\t\terrors={fields.agreeToTermsOfServiceAndPrivacyPolicy.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.remember.id,\n\t\t\t\t\t\t\tchildren: 'Remember me',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(fields.remember, { type: 'checkbox' })}\n\t\t\t\t\t\terrors={fields.remember.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<input {...getInputProps(fields.redirectTo, { type: 'hidden' })} />\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<div className=\"flex items-center justify-between gap-6\">\n\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate an account\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"names":["SignupFormSchema","z","UsernameSchema","NameSchema","PasswordAndConfirmPasswordSchema","meta","SignupRoute","data","useLoaderData","actionData","useActionData","isPending","useIsPending","searchParams","useSearchParams","redirectTo","form","fields","useForm","getZodConstraint","formData","jsx","jsxs","Spacer","Form","getFormProps","HoneypotInputs","Field","getInputProps","session","CheckboxField","ErrorList","StatusButton"],"mappings":"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"}