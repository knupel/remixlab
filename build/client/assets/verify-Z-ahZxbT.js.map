{"version":3,"file":"verify-Z-ahZxbT.js","sources":["../../../app/routes/_auth+/verify.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type ActionFunctionArgs } from '@remix-run/node'\nimport { Form, useActionData, useSearchParams } from '@remix-run/react'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { z } from 'zod'\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Spacer } from '#app/components/spacer.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { validateRequest } from './verify.server.ts'\n\nexport const codeQueryParam = 'code'\nexport const targetQueryParam = 'target'\nexport const typeQueryParam = 'type'\nexport const redirectToQueryParam = 'redirectTo'\nconst types = ['onboarding', 'reset-password', 'change-email', '2fa'] as const\nconst VerificationTypeSchema = z.enum(types)\nexport type VerificationTypes = z.infer<typeof VerificationTypeSchema>\n\nexport const VerifySchema = z.object({\n\t[codeQueryParam]: z.string().min(6).max(6),\n\t[typeQueryParam]: VerificationTypeSchema,\n\t[targetQueryParam]: z.string(),\n\t[redirectToQueryParam]: z.string().optional(),\n})\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst formData = await request.formData()\n\tcheckHoneypot(formData)\n\treturn validateRequest(request, formData)\n}\n\nexport default function VerifyRoute() {\n\tconst [searchParams] = useSearchParams()\n\tconst isPending = useIsPending()\n\tconst actionData = useActionData<typeof action>()\n\tconst parseWithZoddType = VerificationTypeSchema.safeParse(\n\t\tsearchParams.get(typeQueryParam),\n\t)\n\tconst type = parseWithZoddType.success ? parseWithZoddType.data : null\n\n\tconst checkEmail = (\n\t\t<>\n\t\t\t<h1 className=\"text-h1\">Check your email</h1>\n\t\t\t<p className=\"mt-3 text-body-md text-muted-foreground\">\n\t\t\t\tWe've sent you a code to verify your email address.\n\t\t\t</p>\n\t\t</>\n\t)\n\n\tconst headings: Record<VerificationTypes, React.ReactNode> = {\n\t\tonboarding: checkEmail,\n\t\t'reset-password': checkEmail,\n\t\t'change-email': checkEmail,\n\t\t'2fa': (\n\t\t\t<>\n\t\t\t\t<h1 className=\"text-h1\">Check your 2FA app</h1>\n\t\t\t\t<p className=\"mt-3 text-body-md text-muted-foreground\">\n\t\t\t\t\tPlease enter your 2FA code to verify your identity.\n\t\t\t\t</p>\n\t\t\t</>\n\t\t),\n\t}\n\n\tconst [form, fields] = useForm({\n\t\tid: 'verify-form',\n\t\tconstraint: getZodConstraint(VerifySchema),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: VerifySchema })\n\t\t},\n\t\tdefaultValue: {\n\t\t\tcode: searchParams.get(codeQueryParam),\n\t\t\ttype: type,\n\t\t\ttarget: searchParams.get(targetQueryParam),\n\t\t\tredirectTo: searchParams.get(redirectToQueryParam),\n\t\t},\n\t})\n\n\treturn (\n\t\t<main className=\"container flex flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"text-center\">\n\t\t\t\t{type ? headings[type] : 'Invalid Verification Type'}\n\t\t\t</div>\n\n\t\t\t<Spacer size=\"xs\" />\n\n\t\t\t<div className=\"mx-auto flex w-72 max-w-full flex-col justify-center gap-1\">\n\t\t\t\t<div>\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex w-full gap-2\">\n\t\t\t\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"flex-1\">\n\t\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\t\thtmlFor: fields[codeQueryParam].id,\n\t\t\t\t\t\t\t\tchildren: 'Code',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t...getInputProps(fields[codeQueryParam], { type: 'text' }),\n\t\t\t\t\t\t\t\tautoComplete: 'one-time-code',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\terrors={fields[codeQueryParam].errors}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t{...getInputProps(fields[typeQueryParam], { type: 'hidden' })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t{...getInputProps(fields[targetQueryParam], { type: 'hidden' })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t{...getInputProps(fields[redirectToQueryParam], {\n\t\t\t\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</Form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</main>\n\t)\n}\n\nexport function ErrorBoundary() {\n\treturn <GeneralErrorBoundary />\n}\n"],"names":["codeQueryParam","targetQueryParam","typeQueryParam","redirectToQueryParam","types","VerificationTypeSchema","z","VerifySchema","VerifyRoute","searchParams","useSearchParams","isPending","useIsPending","actionData","useActionData","parseWithZoddType","type","checkEmail","jsxs","Fragment","jsx","headings","form","fields","useForm","getZodConstraint","formData","parseWithZod","Spacer","ErrorList","Form","getFormProps","HoneypotInputs","Field","getInputProps","StatusButton"],"mappings":"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"}