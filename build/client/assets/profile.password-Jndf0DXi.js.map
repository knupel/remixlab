{"version":3,"file":"profile.password-Jndf0DXi.js","sources":["../../../app/routes/settings+/profile.password.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\tredirect,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n} from '@remix-run/node'\nimport { Form, Link, useActionData } from '@remix-run/react'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tgetPasswordHash,\n\trequireUserId,\n\tverifyUserPassword,\n} from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { PasswordSchema } from '#app/utils/user-validation.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"dots-horizontal\">Password</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nconst ChangePasswordForm = z\n\t.object({\n\t\tcurrentPassword: PasswordSchema,\n\t\tnewPassword: PasswordSchema,\n\t\tconfirmNewPassword: PasswordSchema,\n\t})\n\t.superRefine(({ confirmNewPassword, newPassword }, ctx) => {\n\t\tif (confirmNewPassword !== newPassword) {\n\t\t\tctx.addIssue({\n\t\t\t\tpath: ['confirmNewPassword'],\n\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\tmessage: 'The passwords must match',\n\t\t\t})\n\t\t}\n\t})\n\nasync function requirePassword(userId: string) {\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\tif (!password) {\n\t\tthrow redirect('/settings/profile/password/create')\n\t}\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requirePassword(userId)\n\treturn json({})\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requirePassword(userId)\n\tconst formData = await request.formData()\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: ChangePasswordForm.superRefine(\n\t\t\tasync ({ currentPassword, newPassword }, ctx) => {\n\t\t\t\tif (currentPassword && newPassword) {\n\t\t\t\t\tconst user = await verifyUserPassword({ id: userId }, currentPassword)\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\t\tpath: ['currentPassword'],\n\t\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\t\tmessage: 'Incorrect password.',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t),\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{\n\t\t\t\tresult: submission.reply({\n\t\t\t\t\thideFields: ['currentPassword', 'newPassword', 'confirmNewPassword'],\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { newPassword } = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tpassword: {\n\t\t\t\tupdate: {\n\t\t\t\t\thash: await getPasswordHash(newPassword),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\treturn redirectWithToast(\n\t\t`/settings/profile`,\n\t\t{\n\t\t\ttype: 'success',\n\t\t\ttitle: 'Password Changed',\n\t\t\tdescription: 'Your password has been changed.',\n\t\t},\n\t\t{ status: 302 },\n\t)\n}\n\nexport default function ChangePasswordRoute() {\n\tconst actionData = useActionData<typeof action>()\n\tconst isPending = useIsPending()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'password-change-form',\n\t\tconstraint: getZodConstraint(ChangePasswordForm),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ChangePasswordForm })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"mx-auto max-w-md\">\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Current Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.currentPassword, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'current-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.currentPassword.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.newPassword, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.newPassword.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Confirm New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.confirmNewPassword, {\n\t\t\t\t\t\ttype: 'password',\n\t\t\t\t\t}),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.confirmNewPassword.errors}\n\t\t\t/>\n\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t<div className=\"grid w-full grid-cols-2 gap-6\">\n\t\t\t\t<Button variant=\"secondary\" asChild>\n\t\t\t\t\t<Link to=\"..\">Cancel</Link>\n\t\t\t\t</Button>\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t>\n\t\t\t\t\tChange Password\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</Form>\n\t)\n}\n"],"names":["handle","jsx","Icon","ChangePasswordForm","z","PasswordSchema","confirmNewPassword","newPassword","ctx","ChangePasswordRoute","actionData","useActionData","isPending","useIsPending","form","fields","useForm","formData","parseWithZod","jsxs","Form","getFormProps","Field","getInputProps","ErrorList","Button","Link","StatusButton"],"mappings":"yrBAaqB,MAAAA,EAAA,CACrB,WAA6BC,EAAA,IAAAC,EAAA,CAC7B,KAAA,kBACC,SAAA,UAAA,CACA,EACA,kBAAA,IAAA,IAAA,EAEDC,EAAuBC,EAAA,OAAA,CACvB,gBAA6BC,EAC7B,YAAkCA,EAClC,mBAA+BA,CAGxB,CAAA,EAAA,YAA6C,CAAA,CACnD,mBAAAC,EACA,YAAAC,CACD,EAAAC,IAAA,CAEMF,IACJC,GACiBC,EAAA,SAAA,CACJ,KAAA,CAAA,oBAAA,EACO,KAAAJ,EAAA,aAAA,OAER,QAAA,0BACZ,CAAA,CACc,CACZ,EACqB,SAAAK,GAAA,CAAA,MACZC,EAAAC,IACTC,EAAAC,IACF,CAAAC,EAAAC,CAAA,EAAAC,EAAA,CACA,GAAA,uBAEF,aAA+Cb,CAAA,EAC9C,WAAiBO,GAAA,YAAAA,EAAa,OAC7B,WAAU,CACV,SAAAO,CAAgB,EAChB,CACG,OAAWC,EAAAD,EAAA,CACd,QAAkD,CACnD,CACD,EAEsB,iBAAA,QACrB,CAAM,EACN,OAAsBE,EAAAA,KAAMC,EAAA,CACrB,OAAA,OACR,GAAAC,EAAAP,CAAA,EAEsB,UAAA,mBACf,SAAA,CAAeb,EAAA,IAAAqB,EAAqB,CAC1C,YACM,SAAA,kBACA,EACE,WAAA,MACoBP,EAAA,gBAAA,MACjB,UACR,CAAA,EACC,+BACA,EACC,OAAAA,EAAa,gBAAA,MAAA,CACZ,EAAwBd,EAAA,IAAAqB,EAAA,CACxB,WAAA,CAAqB,SACZ,cAAA,EAEX,WAAA,CACD,GAAAC,EAAAR,EAAA,YAAA,CACD,KAAA,UAAA,CACD,EACA,aAAA,cACG,EACI,OAAAA,EAAA,YAAA,MAAA,CACN,EAAAd,EAAA,IAAAqB,EAAA,CACC,YAAyB,SACZ,sBAAuD,EAErE,WAAA,CACE,GAAQC,EAAAR,EAAsB,oBACjC,KAAA,UAAA,CACD,EAEM,aAAc,cAEd,EACL,OAAUA,EAAA,mBAAe,MAAA,CACzB,EAAoBd,EAAA,IAAAuB,EAAA,CACd,GAAAV,EAAA,QACL,OAAUA,EAAA,MAAA,CAAA,EACDK,EAAA,KAAA,MAAA,CACP,UAAY,gCACb,SAAA,CAAAlB,EAAA,IAAAwB,EAAA,CACD,QAAA,YACD,QAAA,GACA,SAAAxB,EAAA,IAAAyB,EAAA,CAEM,GAAA,KACN,SAAA,QAAA,CACA,CAAA,CACO,EAAAzB,EAAA,IAAA0B,EAAA,CACC,KAAA,SACM,OAAAf,EAAA,UAAAE,EAAA,QAAA,OACd,SAAA,iBAAA,GACc,CACf,CAAA,CACD,CAAA,CAEA"}