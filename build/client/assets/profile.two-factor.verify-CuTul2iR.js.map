{"version":3,"file":"profile.two-factor.verify-CuTul2iR.js","sources":["../../../app/routes/settings+/profile.two-factor.verify.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\tredirect,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n} from '@remix-run/node'\nimport {\n\tForm,\n\tuseActionData,\n\tuseLoaderData,\n\tuseNavigation,\n} from '@remix-run/react'\nimport * as QRCode from 'qrcode'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { isCodeValid } from '#app/routes/_auth+/verify.server.ts'\nimport { requireUserId } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { getDomainUrl, useIsPending } from '#app/utils/misc.tsx'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { getTOTPAuthUri } from '#app/utils/totp.server.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\nimport { twoFAVerificationType } from './profile.two-factor.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"check\">Verify</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nconst CancelSchema = z.object({ intent: z.literal('cancel') })\nconst VerifySchema = z.object({\n\tintent: z.literal('verify'),\n\tcode: z.string().min(6).max(6),\n})\n\nconst ActionSchema = z.discriminatedUnion('intent', [\n\tCancelSchema,\n\tVerifySchema,\n])\n\nexport const twoFAVerifyVerificationType = '2fa-verify'\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst verification = await prisma.verification.findUnique({\n\t\twhere: {\n\t\t\ttarget_type: { type: twoFAVerifyVerificationType, target: userId },\n\t\t},\n\t\tselect: {\n\t\t\tid: true,\n\t\t\talgorithm: true,\n\t\t\tsecret: true,\n\t\t\tperiod: true,\n\t\t\tdigits: true,\n\t\t},\n\t})\n\tif (!verification) {\n\t\treturn redirect('/settings/profile/two-factor')\n\t}\n\tconst user = await prisma.user.findUniqueOrThrow({\n\t\twhere: { id: userId },\n\t\tselect: { email: true },\n\t})\n\tconst issuer = new URL(getDomainUrl(request)).host\n\tconst otpUri = getTOTPAuthUri({\n\t\t...verification,\n\t\taccountName: user.email,\n\t\tissuer,\n\t})\n\tconst qrCode = await QRCode.toDataURL(otpUri)\n\treturn json({ otpUri, qrCode })\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: () =>\n\t\t\tActionSchema.superRefine(async (data, ctx) => {\n\t\t\t\tif (data.intent === 'cancel') return null\n\t\t\t\tconst codeIsValid = await isCodeValid({\n\t\t\t\t\tcode: data.code,\n\t\t\t\t\ttype: twoFAVerifyVerificationType,\n\t\t\t\t\ttarget: userId,\n\t\t\t\t})\n\t\t\t\tif (!codeIsValid) {\n\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\tpath: ['code'],\n\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\tmessage: `Invalid code`,\n\t\t\t\t\t})\n\t\t\t\t\treturn z.NEVER\n\t\t\t\t}\n\t\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tswitch (submission.value.intent) {\n\t\tcase 'cancel': {\n\t\t\tawait prisma.verification.deleteMany({\n\t\t\t\twhere: { type: twoFAVerifyVerificationType, target: userId },\n\t\t\t})\n\t\t\treturn redirect('/settings/profile/two-factor')\n\t\t}\n\t\tcase 'verify': {\n\t\t\tawait prisma.verification.update({\n\t\t\t\twhere: {\n\t\t\t\t\ttarget_type: { type: twoFAVerifyVerificationType, target: userId },\n\t\t\t\t},\n\t\t\t\tdata: { type: twoFAVerificationType },\n\t\t\t})\n\t\t\treturn redirectWithToast('/settings/profile/two-factor', {\n\t\t\t\ttype: 'success',\n\t\t\t\ttitle: 'Enabled',\n\t\t\t\tdescription: 'Two-factor authentication has been enabled.',\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport default function TwoFactorRoute() {\n\tconst data = useLoaderData<typeof loader>()\n\tconst actionData = useActionData<typeof action>()\n\tconst navigation = useNavigation()\n\n\tconst isPending = useIsPending()\n\tconst pendingIntent = isPending ? navigation.formData?.get('intent') : null\n\n\tconst [form, fields] = useForm({\n\t\tid: 'verify-form',\n\t\tconstraint: getZodConstraint(ActionSchema),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ActionSchema })\n\t\t},\n\t})\n\tconst lastSubmissionIntent = fields.intent.value\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"flex flex-col items-center gap-4\">\n\t\t\t\t<img alt=\"qr code\" src={data.qrCode} className=\"h-56 w-56\" />\n\t\t\t\t<p>Scan this QR code with your authenticator app.</p>\n\t\t\t\t<p className=\"text-sm\">\n\t\t\t\t\tIf you cannot scan the QR code, you can manually add this account to\n\t\t\t\t\tyour authenticator app using this code:\n\t\t\t\t</p>\n\t\t\t\t<div className=\"p-3\">\n\t\t\t\t\t<pre\n\t\t\t\t\t\tclassName=\"whitespace-pre-wrap break-all text-sm\"\n\t\t\t\t\t\taria-label=\"One-time Password URI\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{data.otpUri}\n\t\t\t\t\t</pre>\n\t\t\t\t</div>\n\t\t\t\t<p className=\"text-sm\">\n\t\t\t\t\tOnce you've added the account, enter the code from your authenticator\n\t\t\t\t\tapp below. Once you enable 2FA, you will need to enter a code from\n\t\t\t\t\tyour authenticator app every time you log in or perform important\n\t\t\t\t\tactions. Do not lose access to your authenticator app, or you will\n\t\t\t\t\tlose access to your account.\n\t\t\t\t</p>\n\t\t\t\t<div className=\"flex w-full max-w-xs flex-col justify-center gap-4\">\n\t\t\t\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"flex-1\">\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\t\thtmlFor: fields.code.id,\n\t\t\t\t\t\t\t\tchildren: 'Code',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t...getInputProps(fields.code, { type: 'text' }),\n\t\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t\t\tautoComplete: 'one-time-code',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\terrors={fields.code.errors}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<div className=\"min-h-[32px] px-4 pb-3 pt-1\">\n\t\t\t\t\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-between gap-4\">\n\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\tpendingIntent === 'verify'\n\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t: lastSubmissionIntent === 'verify'\n\t\t\t\t\t\t\t\t\t\t\t? form.status ?? 'idle'\n\t\t\t\t\t\t\t\t\t\t\t: 'idle'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tname=\"intent\"\n\t\t\t\t\t\t\t\tvalue=\"verify\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\tpendingIntent === 'cancel'\n\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t: lastSubmissionIntent === 'cancel'\n\t\t\t\t\t\t\t\t\t\t\t? form.status ?? 'idle'\n\t\t\t\t\t\t\t\t\t\t\t: 'idle'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tname=\"intent\"\n\t\t\t\t\t\t\t\tvalue=\"cancel\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"names":["handle","jsx","Icon","CancelSchema","z","VerifySchema","ActionSchema","TwoFactorRoute","data","useLoaderData","useActionData","navigation","useNavigation","isPending","useIsPending","pendingIntent","_a","form","fields","useForm","getZodConstraint","actionData","formData","parseWithZod","lastSubmissionIntent","jsxs","Form","getFormProps","Field","getInputProps","ErrorList","StatusButton"],"mappings":"koBAWC,MAAAA,EAAA,CACA,WAAAC,EAAA,IAAAC,EAAA,CACA,KAAA,QACM,SAAA,QACP,CAAA,EACA,kBAAkB,IAAA,IAClB,EACAC,EAAqBC,EAAA,OAAA,CACrB,OAA6BA,EAAA,QAAA,QAAA,CAC7B,CAAA,EACAC,EAA8BD,EAAA,OAAA,CAC9B,OAAuBA,EAAA,QAAA,QAAA,EACvB,KAAAA,eAAuB,CAAoB,EAAA,IAAA,CAAA,CAC3C,CAAA,EACAE,EAA+BF,EAAA,mBAAA,SAAA,CAAAD,EAAAE,CAAA,CAAA,EAIqB,SAAAE,GAAA,OACnD,MAAYC,EAAAC,MACOC,IACpBC,EAAAC,IAEMC,EAAAC,IACAC,EAAwBF,GAAAG,EAAAL,EAAA,WAAA,YAAAK,EAAA,IAAA,UAAA,KAC7B,CAAAC,EAAUC,CAAgB,EAAAC,EAAA,CAC1B,GAAM,cACN,WAAAC,EAAAd,CAAA,EAEK,WAAAe,GAAA,YAAAA,EAAiB,OACtB,WAAA,CACA,SAAAC,CACD,EAAC,CAEM,OAAMC,EAA8BD,EAAA,CAErB,OAAAhB,CACrB,CAAM,CACN,CAA0D,CAAA,EAE3CkB,EAAQN,EAAA,OAAA,MACtB,OAAAjB,EAAAA,IAAA,MAAA,CACA,SAAQwB,EAAA,KAAA,MAAA,CACP,UAAI,mCACJ,SAAW,CAAAxB,EAAA,IAAA,MAAA,CACH,IAAA,UACA,IAAAO,EAAA,OACA,UAAA,WAAA,CACT,EAAAP,EAAA,IAAA,IAAA,CACA,SAAA,gDACD,CAAK,EAAcA,EAAA,IAAA,IAAA,CAClB,oBACD,SAAA,8GACA,CAAA,EAA0BA,EAAA,IAAA,MAAuB,CAChD,UAAoB,MACpB,SAAsBA,EAAA,IAAA,MAAA,CACtB,UAAA,qDACkB,iCACWO,EAAA,MAAA,CAC1B,CAAA,GACeP,EAAA,IAAA,IAAA,CAClB,UAAA,UACA,SAAA,4SACD,CAAA,EAA4BA,EAAA,IAAA,MAAA,CAC5B,UAAsB,qDACvB,SAAAwB,EAAA,KAAAC,EAAA,CAEsB,OAAA,OACf,GAAAC,EAAeV,CAAA,EACf,UAAiB,SAEjB,SAAA,CAAmBhB,EAAA,IAAa2B,EAAU,CACvC,WACP,SACqBV,EAAA,KAAA,GAAiB,SAAA,MAC/B,aACM,CACL,GAAAW,EAAAX,EAAA,KAAA,CACE,KAAA,MAAA,CACR,EACiB,UAAA,GACJ,aAAA,eACZ,EACA,OAAqBA,EAAA,KAAA,MAAA,CACZ,EAAAjB,EAAA,IAAA,MAAA,CACT,UAAA,8BACD,SAASA,EAAA,IAAA6B,EAAA,CACV,GAAAb,EAAA,QACA,OAAAA,EAAA,MAAA,CACK,CAAA,CACP,EAAAQ,EAAA,KAAA,MAAA,CAEG,uCACI,SAAA,CAAAxB,EAAA,IAAA8B,EAAA,CACJ,UAAmB,SACX,OAAAhB,IAAsB,mBAAoBS,IAAA,SAAAP,EAAA,QAAA,OAAA,OACrD,KAAA,SACD,KAAA,SAEQ,MAAW,SACH,SAAA,QACd,CAAM,IAA+B,IAAAc,EAAA,CAC7B,UAAQ,SACf,QAAA,mBACehB,IAA8B,SAAA,UAAAS,IAAA,SAAAP,EAAA,QAAA,OAAA,OAC/C,KAAA,SACe,KAAA,SACR,eACE,SAAAJ,EACO,SAAA,QAAoD,CAClE,CAAA,CAAA,CACA,CAAA,CAAoC,CACpC,CACD,CAAA,CAAA,CAAyD,CAAA,CAClD,CAAA,CACC"}