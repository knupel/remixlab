{"version":3,"file":"profile.password_.create-l99ilgAl.js","sources":["../../../app/routes/settings+/profile.password_.create.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\tredirect,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n} from '@remix-run/node'\nimport { Form, Link, useActionData } from '@remix-run/react'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { getPasswordHash, requireUserId } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { PasswordAndConfirmPasswordSchema } from '#app/utils/user-validation.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"dots-horizontal\">Password</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nconst CreatePasswordForm = PasswordAndConfirmPasswordSchema\n\nasync function requireNoPassword(userId: string) {\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\tif (password) {\n\t\tthrow redirect('/settings/profile/password')\n\t}\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requireNoPassword(userId)\n\treturn json({})\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requireNoPassword(userId)\n\tconst formData = await request.formData()\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: CreatePasswordForm,\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{\n\t\t\t\tresult: submission.reply({\n\t\t\t\t\thideFields: ['password', 'confirmPassword'],\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { password } = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tpassword: {\n\t\t\t\tcreate: {\n\t\t\t\t\thash: await getPasswordHash(password),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\treturn redirect(`/settings/profile`, { status: 302 })\n}\n\nexport default function CreatePasswordRoute() {\n\tconst actionData = useActionData<typeof action>()\n\tconst isPending = useIsPending()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'password-create-form',\n\t\tconstraint: getZodConstraint(CreatePasswordForm),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: CreatePasswordForm })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"mx-auto max-w-md\">\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.password, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.password.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Confirm New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.confirmPassword, {\n\t\t\t\t\t\ttype: 'password',\n\t\t\t\t\t}),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.confirmPassword.errors}\n\t\t\t/>\n\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t<div className=\"grid w-full grid-cols-2 gap-6\">\n\t\t\t\t<Button variant=\"secondary\" asChild>\n\t\t\t\t\t<Link to=\"..\">Cancel</Link>\n\t\t\t\t</Button>\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t>\n\t\t\t\t\tCreate Password\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</Form>\n\t)\n}\n"],"names":["handle","jsx","Icon","CreatePasswordForm","PasswordAndConfirmPasswordSchema","CreatePasswordRoute","actionData","useActionData","isPending","useIsPending","form","fields","getZodConstraint","formData","parseWithZod","jsxs","Form","getFormProps","Field","getInputProps","ErrorList","Button","Link"],"mappings":"wqBAYqB,MAAAA,EAAA,CACrB,WAA6BC,EAAA,IAAAC,EAAA,CAC7B,uBACA,SAAuB,UACvB,CAAA,EACA,kBAAiD,IAAA,IAG1C,EACMC,EAAAC,WACaC,GAAA,CAC1B,MAAAC,EAAAC,IAE2BC,EAAAC,IAE3B,CAAAC,EAAeC,KAAkB,CAChC,GAAM,uBACL,WAAUC,EAAaT,CAAA,EACvB,WAAgBG,GAAA,YAAAA,EAAA,OAChB,WAAA,CACG,SAAAO,CACH,EAAA,CACD,OAAAC,EAAAD,EAAA,CACD,OAAAV,CAEA,CAAsB,CACf,EACN,yBACA,CAAO,EACR,OAAAY,EAAAA,KAAAC,EAAA,CAEsB,OAAA,OACf,GAAAC,EAAeP,CAAA,EACrB,6BACM,SAAA,CAAiBT,EAAQ,IAASiB,EAAA,CAClC,WAAA,CACE,SAAA,cACC,EACR,WAAA,CACG,GAAAC,IAAiC,SAAA,CAC7B,KAAA,UAAA,CACN,EACC,2BACC,EAA0C,OAC1CR,EAAA,SAAA,MAAA,CACF,EAAAV,EAAA,IAAAiB,EAAA,CACA,WAAU,CACX,SAAA,sBACD,EAEM,WAAW,CAEX,GAAAC,EAAmBR,EAAA,gBAAA,CACxB,KAAU,UAAe,CACzB,EACM,aAAA,cACK,EAAA,OACDA,EAAA,gBAAA,MAAA,CACP,EAAYV,EAAA,IAAAmB,EAAgB,CAC7B,GAAAV,EAAA,QACD,OAAAA,EAAA,MAAA,CACD,EAAAK,EAAA,KAAA,MAAA,CACA,UAAA,gCAED,SAAgB,CAAAd,EAAA,IAAAoB,EAAuB,CACxC,QAAA,YAEA,QAAA,GACO,SAA0CpB,EAAA,IAAAqB,EAAA,SAGzC,SAAY,QAAY,CAC1B,CAAA,CACJ,UAA+C,eAE/C,OAAad,EAAY,UAAAE,EAAA,QAAA,OACxB,SAAoB,iBAAwC,CAC7D,CAAA,CAAA,CACkB,CAAA,CAAA,CAClB,CAED"}